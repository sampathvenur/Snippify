{
    "title": "Jump Search",
    "description": "Searches a sorted vector of integers using jump search, where the search is performed by jumping ahead by fixed steps and doing a linear search in the identified block.",
    "author": "Shrijith",
    "code": "#include <vector>\n#include <cmath>\n\nint jump_search(const std::vector<int>& arr, int target) {\n    int n = static_cast<int>(arr.size());\n    int step = static_cast<int>(std::sqrt(n));\n    int prev = 0;\n\n    while (arr[std::min(step, n) - 1] < target) {\n        prev = step;\n        step += static_cast<int>(std::sqrt(n));\n        if (prev >= n)\n            return -1;\n    }\n\n    for (int i = prev; i < std::min(step, n); ++i) {\n        if (arr[i] == target)\n            return i;\n    }\n    return -1;\n}"
}
