{
    "title": "Get Desktop Enviroment",
    "description": "Get the Desktop Enviroment that the user is currently using.",
    "author": "sampathvenur",
    "code": "fn get_desktop_env() -> String {\n    use std::env;\n    use std::fs::File;\n    use std::io::Read;\n\n    // Return empty string if no X display is available\n    if env::var(\"DISPLAY\").is_err() {\n        return String::new();\n    }\n\n    // Check common desktop environment variables.\n    for env_var in &[\n        \"XDG_SESSION_DESKTOP\",\n        \"XDG_CURRENT_DESKTOP\",\n        \"DESKTOP_SESSION\",\n    ] {\n        if let Ok(de) = env::var(env_var) {\n            return de;\n        }\n    }\n\n    // As fallback, try to get desktop name from last word of last line in .xinitrc\n    let path = format!(\"{}/.xinitrc\", env::var(\"HOME\").unwrap_or_default());\n    if let Ok(mut file) = File::open(&path) {\n        let mut buf = String::new();\n        if file.read_to_string(&mut buf).is_ok() {\n            if let Some(last_line) = buf.lines().last() {\n                let last_word = last_line.split(' ').last().unwrap_or(\"\");\n                return last_word.to_string();\n            }\n        }\n    }\n\n    // Return \"N/A\" if no desktop environment could be detected\n    String::from(\"N/A\")\n}\n\n// Usage:\nget_desktop_env(); // Returns: the desktop environment that the user actually has e.g. i3."
}